- defaults:
    name: 'build_defaults'
    majors: &majors_build
        - '11':
           branch_name: sapmachine11
           linux_aarch64_devkit: 'io.sapmachine.build.devkit.linux-aarch64:devkit-fedora-gcc:21-8.5.0'
           linux_ppc64le_devkit: 'io.sapmachine.build.devkit.linux-ppc64le:devkit-fedora-gcc:19-8.5.0'
           linux_x86_64_devkit: 'io.sapmachine.build.devkit.linux-x64:devkit-fedora-gcc:12-8.5.0'
        - '17':
           branch_name: sapmachine17
           linux_aarch64_devkit: 'io.sapmachine.build.devkit.linux-aarch64:devkit-fedora-gcc:21-10.3.0'
           linux_ppc64le_devkit: 'io.sapmachine.build.devkit.linux-ppc64le:devkit-fedora-gcc:19-10.3.0'
           linux_x86_64_devkit: 'io.sapmachine.build.devkit.linux-x64:devkit-fedora-gcc:19-10.3.0'
        - '19':
           branch_name: sapmachine19
        - '20':
           branch_name: sapmachine20
           windows_devkit: 'io.sapmachine.build.devkit.windows-x64:devkit-vs2019:16.11.13'
        - '21':
           branch_name: sapmachine
           windows_devkit: 'io.sapmachine.build.devkit.windows-x64:devkit-vs2019:16.11.13'
           gtest_version: v1.13.0
    platforms: &platforms
        - linux_aarch64:
            architecture: linux-aarch64
            debarch: arm64
            devkit_default: '{linux_aarch64_devkit|io.sapmachine.build.devkit.linux-aarch64:devkit-fedora-gcc:27-11.3.0}'
            docker_agent: &docker_agent_aarch64 |-
                agent {{
                                dockerfile {{
                                    dir "SapMachine-infrastructure/dockerfiles/ubuntu_20_04/arm64"
                                    reuseNode true
                                    label "linux_aarch64"
                                    additionalBuildArgs '--build-arg ARTIFACTORY_CREDS=\"$ARTIFACTORY_CREDS\"'
                                }}
                            }}
            docker_agent_verify: *docker_agent_aarch64
            build_debian_packages_pre: &build_debian_packages_pre 'stage("Build Debian Packages") {{'
            docker_agent_debian: *docker_agent_aarch64
            build_debian_packages_step: &build_debian_packages_step |-
                when {{
                                beforeAgent true
                                expression {{ env.BUILD_INSTALLER_PACKAGES == "true" }}
                            }}
                            steps {{
                                sh "python3 SapMachine-infrastructure/lib/make_deb.py --tag=${{env.SAPMACHINE_VERSION}} --architecture={architecture|}"
                            }}
                            post {{
                                success {{
                                    stash includes: '*.deb', name: 'debPackage'
                                    stash includes: 'SapMachine-infrastructure/**', name: 'infra'
                                }}
                            }}
                        }}
            publish_debian_packages: &publish_debian_packages |-
                stage("Publish Debian Packages") {{
                            agent {{
                                label 'agent-local-docker-ubuntu'
                            }}
                            when {{
                                beforeAgent true
                                expression {{ params.PUBLISH == true && env.RELEASE == "true" }}
                            }}
                            steps {{
                                unstash 'infra'
                                unstash 'debPackage'
                                sh "cp -n *.deb /var/pkg/deb/{debarch|} || true"
                                sh "python3 SapMachine-infrastructure/lib/recreate_deb_repository.py -s -r /var/pkg/deb/{debarch|}"
                            }}
                        }}
            generate_dockerfiles: &generate_dockerfiles |-
                stage("Generate Dockerfiles") {{
                            when {{
                                expression {{ params.PUBLISH == true && env.RELEASE == "true" }}
                            }}
                            steps {{
                                build job: 'generate-dockerfiles', propagate: false, wait: true
                            }}
                        }}
            save_workspace_on_error: &save_workspace_on_error |-
                unsuccessful {{
                            script {{
                                sh 'zip -rq workspace.zip .'
                                archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                            }}
                        }}
        - linux_alpine_x86_64:
            docker_agent: &docker_agent_alpine_x86_64 |-
                agent {{
                                dockerfile {{
                                    dir "SapMachine-infrastructure/dockerfiles/alpine_3/x86_64"
                                    reuseNode true
                                    label "linux_alpine_x86_64"
                                }}
                            }}
            docker_agent_verify: *docker_agent_alpine_x86_64
            save_workspace_on_error: *save_workspace_on_error
        - linux_ppc64le:
            architecture: linux-ppc64le
            debarch: ppc64el
            devkit_default: '{linux_ppc64le_devkit|io.sapmachine.build.devkit.linux-ppc64le:devkit-fedora-gcc:27-11.3.0}'
            docker_agent: &docker_agent_ppc64le |-
                agent {{
                                dockerfile {{
                                    dir "SapMachine-infrastructure/dockerfiles/ubuntu_20_04/ppc64le"
                                    reuseNode true
                                    label "linux_ppc64le"
                                    additionalBuildArgs '--build-arg ARTIFACTORY_CREDS=\"$ARTIFACTORY_CREDS\"'
                                }}
                            }}
            docker_agent_verify: *docker_agent_ppc64le
            build_debian_packages_pre: *build_debian_packages_pre
            docker_agent_debian: *docker_agent_ppc64le
            build_debian_packages_step: *build_debian_packages_step
            publish_debian_packages: *publish_debian_packages
            generate_dockerfiles: *generate_dockerfiles
        - linux_x86_64:
            architecture: linux-x64
            debarch: amd64
            devkit_default: '{linux_x86_64_devkit|io.sapmachine.build.devkit.linux-x64:devkit-fedora-gcc:27-11.3.0}'
            docker_agent: &docker_agent_x86_64 |-
                agent {{
                                dockerfile {{
                                    dir "SapMachine-infrastructure/dockerfiles/ubuntu_20_04/x86_64"
                                    reuseNode true
                                    label "linux_x86_64"
                                    additionalBuildArgs '--build-arg ARTIFACTORY_CREDS=\"$ARTIFACTORY_CREDS\"'
                                }}
                            }}
            docker_agent_verify: *docker_agent_x86_64
            build_debian_packages_pre: *build_debian_packages_pre
            docker_agent_debian: *docker_agent_x86_64
            build_debian_packages_step: *build_debian_packages_step
            build_rpm_packages: |-
                stage("Build RPM Packages") {{
                            agent {{
                                dockerfile {{
                                    dir "SapMachine-infrastructure/dockerfiles/fedora-rpm"
                                    reuseNode true
                                    label "linux_x86_64"
                                }}
                            }}
                            when {{
                                beforeAgent true
                                expression {{ env.BUILD_INSTALLER_PACKAGES == "true" }}
                            }}
                            steps {{
                                sh "python3 SapMachine-infrastructure/lib/make_rpm.py --tag=${{env.SAPMACHINE_VERSION}}"
                            }}
                        }}
            publish_debian_packages: *publish_debian_packages
            publish_cf_data: &publish_cf_data |-
                stage("Publish CF Java Buildpack Data") {{
                            when {{
                                expression {{ params.PUBLISH == true && env.RELEASE == "true" }}
                            }}
                            steps {{
                                build job: 'generate-cf-java-buildpack-data', propagate: true, wait: true
                            }}
                        }}
            generate_dockerfiles: *generate_dockerfiles
            save_workspace_on_error: *save_workspace_on_error
        - macos_x86_64:
            devkit_default: 'io.sapmachine.build.devkit.macos:devkit-xcode:13.1'
            create_brew_casks: &create_brew_casks |-
                stage("Create Brew Casks") {{
                            when {{
                                expression {{ params.PUBLISH == true && JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ && env.RELEASE != "true" }}
                            }}
                            steps {{
                                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {{
                                    lock('MacBrewCaskGenerationSynchronizer') {{
                                        sh "python3 SapMachine-infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                                    }}
                                }}
                            }}
                        }}
        - macos_aarch64:
            devkit_default: 'io.sapmachine.build.devkit.macos:devkit-xcode:13.1'
            create_brew_casks: *create_brew_casks
        - windows_x86_64:
            devkit_default: '{windows_devkit|io.sapmachine.build.devkit.windows-x64:devkit-vs2017:15.9.49}'
            build_windows_installer: |-
                stage("Build Windows Installer") {{
                            when {{
                                expression {{ env.BUILD_INSTALLER_PACKAGES == "true" }}
                            }}
                            steps {{
                                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {{
                                    script {{
                                        def jdk_bundle_name = readFile "${{env.WORKSPACE}}/jdk_bundle_name.txt"
                                        def jre_bundle_name = readFile "${{env.WORKSPACE}}/jre_bundle_name.txt"
                                        jdk_bundle_name = jdk_bundle_name.trim()
                                        jre_bundle_name = jre_bundle_name.trim()

                                        sh "python3 SapMachine-infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${{jdk_bundle_name}}"
                                        sh "python3 SapMachine-infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${{jre_bundle_name}}"
                                    }}
                                }}
                            }}
                        }}
            save_workspace_on_error: *save_workspace_on_error
    build_type_pr: &build_type_pr
        - pr-validation:
            extra_configure_options: '--with-debug-level=fastdebug'
            trigger: |
                <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
                    <triggers>
                        <org.jenkinsci.plugins.github.pullrequest.GitHubPRTrigger plugin="github-pullrequest@0.4.0">
                            <spec>H/1 * * * *</spec>
                            <triggerMode>HEAVY_HOOKS</triggerMode>
                            <cancelQueued>true</cancelQueued>
                            <abortRunning>false</abortRunning>
                            <skipFirstRun>false</skipFirstRun>
                            <repoProviders>
                                <com.github.kostyasha.github.integration.generic.repoprovider.GitHubPluginRepoProvider>
                                <cacheConnection>true</cacheConnection>
                                <manageHooks>true</manageHooks>
                                <repoPermission>ADMIN</repoPermission>
                                </com.github.kostyasha.github.integration.generic.repoprovider.GitHubPluginRepoProvider>
                            </repoProviders>
                            <errorsAction>
                                <description>GitHub Pull Requests Trigger Errors</description>
                                <errors class="java.util.Collections$SynchronizedSet" serialization="custom">
                                <java.util.Collections_-SynchronizedCollection>
                                    <default>
                                    <c class="set"/>
                                    <mutex class="java.util.Collections$SynchronizedSet" reference="../../.."/>
                                    </default>
                                </java.util.Collections_-SynchronizedCollection>
                                </errors>
                            </errorsAction>
                            <events>
                                <org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPRCommitEvent/>
                                <org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPRCommentEvent>
                                <comment>retest this please</comment>
                                </org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPRCommentEvent>
                                <org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPROpenEvent/>
                            </events>
                            <preStatus>false</preStatus>
                            <branchRestriction>
                                <targetBranchList>
                                <string>{branch_name}</string>
                                </targetBranchList>
                            </branchRestriction>
                        </org.jenkinsci.plugins.github.pullrequest.GitHubPRTrigger>
                    </triggers>
                </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            init_pr: |
                // update GitHub status and initialize PR Verification
                                script {{
                                    setGitHubPullRequestStatus context: "validate-pr-{major}-{platform}", state: 'PENDING'
                                }}
            init_variables: |-
                // initialize some variables
                                    env.RELEASE = "false"
            verify_pre: 'stage("Verify PR") {{'
            verify_step: |-
                steps {{
                                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {{
                                    script {{
                                        env.COMMENT = ('{platform}' == 'linux_x86_64') ? "-c" : ""
                                        env.VERIFICATION_RESULT = sh(
                                            script: "python3 SapMachine-infrastructure/lib/verify_pr.py -p ${{env.GITHUB_PR_NUMBER}} ${{env.COMMENT}}",
                                            returnStatus: true
                                        )

                                        if (env.VERIFICATION_RESULT == "0") {{
                                            error("Pull Request Verification failed")
                                        }}
                                    }}
                                }}
                            }}
                        }}
            verification_switch: 'env.VERIFICATION_RESULT != "2" &&'
            verification_when: |-
                when {{
                                expression {{ env.VERIFICATION_RESULT != "2" }}
                            }}
            verification_when_docker: |-
                when {{
                                beforeAgent true
                                expression {{ env.VERIFICATION_RESULT != "2" }}
                            }}
            build_windows_installer: ''
            build_debian_packages_pre: ''
            docker_agent_debian: ''
            build_debian_packages_step: ''
            build_rpm_packages: ''
            publish_debian_packages: ''
            create_brew_casks: ''
            generate_dockerfiles: ''
            publish_cf_data: ''
            post_code: |-
                aborted {{
                            script {{
                                setGitHubPullRequestStatus context: "validate-pr-{major}-{platform}", state: 'FAILURE', message: 'job aborted'
                            }}
                        }}
                        failure {{
                            script {{
                                setGitHubPullRequestStatus context: "validate-pr-{major}-{platform}", state: 'FAILURE', message: 'build failed'
                            }}
                        }}
                        unstable {{
                            script {{
                                setGitHubPullRequestStatus context: "validate-pr-{major}-{platform}", state: 'FAILURE', message: 'tests failed'
                            }}
                        }}
                        success {{
                            script {{
                                setGitHubPullRequestStatus context: "validate-pr-{major}-{platform}", state: 'SUCCESS'
                            }}
    build_type_snapshot: &build_type_snapshot
        - snapshot:
            docker_agent_verify: ''
            init_variables: |-
                // initialize some variables
                                    env.BUILD_INSTALLER_PACKAGES = params.BUILD_INSTALLER_PACKAGES
                                    env.ART_VERSION = "snapshot-{major}-" + (new java.text.SimpleDateFormat("yyyyMMddHHmmss")).format(new Date())
                                    env.RELEASE = "false"
            publish_artifactory_pre: &publish_artifactory_pre 'stage("Publish Artifactory") {{'
            publish_artifactory_when: |-
                when {{
                                expression {{ params.UPLOAD_ARTIFACTORY == true }}
                            }}
            publish_artifactory_step: &publish_artifactory_step |-
                steps {{
                                // Show the installed version of JFrog CLI.
                                jf '-v'

                                // Upload the test archive
                                jf "rt u test.zip sapmachine-mvn/io/sapmachine/build-results/{platform}/${{env.ART_VERSION}}/test.zip"
                            }}
                        }}
            publish_debian_packages: ''
            create_brew_casks: ''
            generate_dockerfiles: ''
            publish_cf_data: ''
            archive: &archive |-
                script {{
                                // create a gensrc archive
                                if (params.CREATE_GENSRC_BUNDLE == true) {{
                                    sh 'cd SapMachine/build && cd $(ls) && zip -rq ${{WORKSPACE}}/support_gensrc.zip support/gensrc'
                                    archiveArtifacts artifacts: 'support_gensrc.zip'
                                }}

                                // archive workspace on request
                                if (params.ARCHIVE_WORKSPACE == true) {{
                                    sh 'zip -rq workspace.zip .'
                                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                                }}
                            }}
    build_type_release: &build_type_release
        - release:
            docker_agent_verify: ''
            init_variables: |-
                // this variable, indicating that we run a release build, is needed in some scripts
                                    env.RELEASE_BUILD = "true"

                                    // check for conforming SAPMACHINE_VERSION tag and set RELEASE flag accordingly
                                    def m = (env.SAPMACHINE_VERSION =~ /sapmachine-((\d+(\.\d+)*)(\+(\d+))?)$/)
                                    if (m) {{
                                        if (m.group(4) == null) {{
                                            env.RELEASE = "true"
                                        }} else {{
                                            env.RELEASE = "false"
                                        }}
                                    }} else {{
                                        error(env.SAPMACHINE_VERSION + " is no valid SapMachine version tag.")
                                    }}

                                    // when we publish, installer packages are mandatory
                                    if (params.PUBLISH == true) {{
                                        env.BUILD_INSTALLER_PACKAGES = true
                                    }} else {{
                                        env.BUILD_INSTALLER_PACKAGES = params.BUILD_INSTALLER_PACKAGES
                                    }}
            get_art_ver: env.ART_VERSION = readFile "${{env.WORKSPACE}}/javavmversion.txt"
            publish_artifactory_pre: *publish_artifactory_pre
            publish_artifactory_step: *publish_artifactory_step
            publish_github: |-
                stage("Publish GitHub") {{
                            when {{
                                expression {{ params.PUBLISH == true && !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ && env.RELEASE == "true") }}
                            }}
                            steps {{
                                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {{
                                    sh "SapMachine-infrastructure/lib/publish.sh"
                                }}
                            }}
                        }}
            publish_website_data: |-
                stage("Publish Website Data") {{
                            when {{
                                expression {{ params.PUBLISH == true }}
                            }}
                            steps {{
                                build job: 'generate-website-data', propagate: false, wait: false
                            }}
                        }}
            archive: *archive
    build_dsl: &build_dsl |
        pipeline {{
            agent {{
                label "{platform}"
            }}
            environment {{
                ARTIFACTORY_CREDS = credentials('openjdk-artifactory')
            }}
            tools {{
                jfrog 'jfrog-cli'
            }}
            stages {{
                stage("Init") {{
                    steps {{
                        {init_pr|}
                        // trigger workspace cleanup
                        cleanWs()

                        // check/configure some job parameters
                        script {{
                            if (params.SAPMACHINE_VERSION.isEmpty()) {{
                                env.SAPMACHINE_VERSION = params.GIT_REF
                            }} else {{
                                env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                            }}

                            {init_variables|}
                        }}
                    }}
                }}
                stage("Checkout Infrastructure Repository") {{
                    steps {{
                        sh '''#!/bin/bash
                            set -e

                            if [[ `uname` == CYGWIN* ]]; then
                              GIT_TOOL="/cygdrive/c/Program Files/Git/cmd/git.exe"
                            else
                              GIT_TOOL=git
                            fi

                            "$GIT_TOOL" --version
                            set -ex
                            "$GIT_TOOL" init SapMachine-infrastructure && cd SapMachine-infrastructure
                            GIT_TERMINAL_PROMPT=0 "$GIT_TOOL" fetch --depth 1 https://github.com/SAP/SapMachine-infrastructure.git master
                            "$GIT_TOOL" checkout --detach FETCH_HEAD
                        '''
                    }}
                }}
                {verify_pre|}
                    {docker_agent_verify|}
                    {verify_step|}
                stage("Checkout SapMachine Repository") {{
                    {verification_when|}
                    steps {{
                        sh("SapMachine-infrastructure/lib/git_clone.sh $SAPMACHINE_GIT_REPOSITORY SapMachine $GIT_REF")
                    }}
                }}
                stage("Prepare Devkit") {{
                    {docker_agent|}
                    when {{
                        beforeAgent true
                        expression {{ {verification_switch|} !params.DEVKIT.isEmpty() }}
                    }}
                    steps {{
                        script {{
                            String[] gav = params.DEVKIT.split(":");
                            if (gav.length == 3) {{
                                echo "Extracting devkit from GAV coordinates: \"${{params.DEVKIT}}\"."
                                sh("SapMachine-infrastructure/lib/deploy-devkit.sh ${{gav[0]}} ${{gav[1]}} ${{gav[2]}}")
                                env.DEVKIT_PATH = sh(script: "cat devkitlocation.txt", returnStdout: true).trim()
                            }} else {{
                                echo "Devkit not in GAV notation, assuming path."
                                env.DEVKIT_PATH = params.DEVKIT;
                            }}
                            echo "Devkit Path: ${{env.DEVKIT_PATH}}"
                        }}
                    }}
                }}
                stage("Download Prerequisites") {{
                    {docker_agent|}
                    {verification_when_docker|}
                    steps {{
                        // Download Boot JDK, Credentials are needed to avoid rate limit exceedance
                        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {{
                            sh "python3 SapMachine-infrastructure/lib/download_boot_jdk.py -d `pwd`"
                        }}

                        // Download googletest
                        sh("SapMachine-infrastructure/lib/git_clone.sh https://github.com/google/googletest.git gtest refs/tags/{gtest_version|release-1.8.1}")

                        // Download jtreg if required
                        script {{
                            if (params.RUN_TESTS) {{
                                sh "python3 SapMachine-infrastructure/lib/download_jtreg.py"
                            }}
                        }}
                    }}
                }}
                stage("Build") {{
                    {docker_agent|}
                    {verification_when_docker|}
                    environment {{
                        BOOT_JDK = "${{WORKSPACE}}/boot_jdk"
                    }}
                    steps {{
                        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {{
                            script {{
                                sh("SapMachine-infrastructure/lib/build.sh")
                                {get_art_ver|}
                            }}
                        }}
                    }}
                }}
                stage("Run jtreg hotspot") {{
                    {docker_agent|}
                    when {{
                        beforeAgent true
                        expression {{ {verification_switch|} params.RUN_TESTS == true && params.hotspot_test_groups }}
                    }}
                    environment {{
                        TESTSUITE = 'hotspot'
                    }}
                    steps {{
                        sh "bash SapMachine-infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${{env.TESTSUITE}} ${{params.hotspot_test_groups}} || true"
                        publishHTML target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: "test_report_${{env.TESTSUITE}}",
                            reportFiles: 'JTreport/index.html',
                            reportName: "JT Report ${{env.TESTSUITE}}"
                        ]
                        // persist data for test trend graph
                        junit "test_report_${{env.TESTSUITE}}/JTwork/**/*.jtr.xml"
                        script {{
                            if (findFiles([glob: 'test_report_${{env.TESTSUITE}}/JTwork/**/hs_err_pid*.log']).size() > 0) {{
                                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${{env.TESTSUITE}}/JTwork/**/hs_err_pid*.log"
                            }}
                        }}
                    }}
                }}
                stage("Run jtreg jdk") {{
                    {docker_agent|}
                    when {{
                        beforeAgent true
                        expression {{ {verification_switch|} params.RUN_TESTS == true && params.jdk_test_groups }}
                    }}
                    environment {{
                        TESTSUITE = 'jdk'
                    }}
                    steps {{
                        sh "bash SapMachine-infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${{env.TESTSUITE}} ${{params.jdk_test_groups}} || true"

                        publishHTML target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: "test_report_${{env.TESTSUITE}}",
                            reportFiles: 'JTreport/index.html',
                            reportName: "JT Report ${{env.TESTSUITE}}"
                        ]
                        // persist data for test trend graph
                        junit "test_report_${{env.TESTSUITE}}/JTwork/**/*.jtr.xml"
                        script {{
                            if (findFiles([glob: 'test_report_${{env.TESTSUITE}}/JTwork/**/hs_err_pid*.log']).size() > 0) {{
                                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${{env.TESTSUITE}}/JTwork/**/hs_err_pid*.log"
                            }}
                        }}
                    }}
                }}
                stage("Run jtreg langtools") {{
                    {docker_agent|}
                    when {{
                        beforeAgent true
                        expression {{ {verification_switch|} params.RUN_TESTS == true && params.langtools_test_groups }}
                    }}
                    environment {{
                        TESTSUITE = 'langtools'
                    }}
                    steps {{
                        sh "bash SapMachine-infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${{env.TESTSUITE}} ${{params.langtools_test_groups}} || true"

                        publishHTML target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: "test_report_${{env.TESTSUITE}}",
                            reportFiles: 'JTreport/index.html',
                            reportName: "JT Report ${{env.TESTSUITE}}"
                        ]
                        // persist data for test trend graph
                        junit "test_report_${{env.TESTSUITE}}/JTwork/**/*.jtr.xml"
                        script {{
                            if (findFiles([glob: 'test_report_${{env.TESTSUITE}}/JTwork/**/hs_err_pid*.log']).size() > 0) {{
                                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${{env.TESTSUITE}}/JTwork/**/hs_err_pid*.log"
                            }}
                        }}
                    }}
                }}
                {build_windows_installer|}
                {build_debian_packages_pre|}
                    {docker_agent_debian|}
                    {build_debian_packages_step|}
                {build_rpm_packages|}
                {publish_artifactory_pre|}
                    {publish_artifactory_when|}
                    {publish_artifactory_step|}
                {publish_github|}
                {publish_debian_packages|}
                {create_brew_casks|}
                {generate_dockerfiles|}
                {publish_website_data|}
                {publish_cf_data|}
            }}
            post {{
                {post_code|success {{}
                    {archive|}
                    cleanWs()
                }}
                {save_workspace_on_error|}
            }}
        }}

- defaults:
    name: 'service_defaults'
    build_alpine: true
    majors: &majors_service
        - '11':
           branch_name: sapmachine11
           build_alpine: false
        - '17':
           branch_name: sapmachine17
        - '19':
           branch_name: sapmachine19
        - '20':
           branch_name: sapmachine20
        - '21':
           branch_name: sapmachine

- project:
    name: builds
    major: *majors_build
    platform: *platforms
    build_type_pr: *build_type_pr
    build_type_snapshot: *build_type_snapshot
    build_type_release: *build_type_release
    exclude:
        - platform: linux_alpine_x86_64
          major: '11'
    jobs:
        - build-{major}-{build_type_pr}-{platform}
        - build-{major}-{build_type_snapshot}-{platform}
        - build-{major}-{build_type_release}-{platform}

- project:
    name: service-builds
    major: *majors_service
    jobs:
        - build-service-snapshot-{major}
        - build-service-release-{major}

- job-template:
    name: build-{major}-{build_type_pr}-{platform}
    defaults: 'build_defaults'
    description: 'PR build for SapMachine {major} on {platform}.'
    project-type: pipeline
    sandbox: true
    concurrent: false
    properties:
        - github:
            url: 'https://github.com/SAP/SapMachine'
        - build-discarder:
            num-to-keep: 20
            artifact-num-to-keep: 1
        - raw:
            xml: '{trigger}'
    parameters:
        - string:
            name: SAPMACHINE_GIT_REPOSITORY
            default: 'https://github.com/SAP/SapMachine.git'
            description: 'The Git repository to use.'
        - string:
            name: GIT_REF
            default: '{branch_name}'
            description: 'The Git tag, branch or commit to build.'
        - string:
            name: SAPMACHINE_VERSION
            default: ''
            description: 'Either a SapMachine Release Tag or a JDK Major version. If empty, GIT_REF is used.'
        - string:
            name: JDK_BUILD
            default: ''
            description: 'Sets the version build number explicitly.'
        - string:
            name: SAPMACHINE_ARCHIVE_NAME_PREFIX
            default: 'sapmachine{major}-{platform}'
            description: 'The prefix of the bundle archive.'
        - string:
            name: DEVKIT
            default: '{devkit_default|}'
            description: 'Devkit, could be either a path that locally exists or the GAV coordinates to a tar.gz archive to be downloaded and extracted.'
        - string:
            name: EXTRA_CONFIGURE_OPTIONS
            default: '{extra_configure_options|}'
            description: 'Extra configure options passed directly to configure script.'
        - string:
            name: hotspot_test_groups
            default: ':tier1'
            description: 'Select the test group for jtreg hotspot tests. Empty means disabled.'
        - string:
            name: jdk_test_groups
            default: ':tier1'
            description: 'Select the test group for jtreg jdk tests. Empty means disabled.'
        - string:
            name: langtools_test_groups
            default: '"jdk tools lib"'
            description: 'Select the test group for jtreg langtools tests. Empty means disabled.'
        - bool:
            name: RUN_TESTS
            default: true
            description: 'Enable/disable jtreg runs.'
    dsl: *build_dsl

- job-template:
    name: build-{major}-{build_type_snapshot}-{platform}
    defaults: 'build_defaults'
    description: 'Snapshot build for SapMachine {major} on {platform}.'
    project-type: pipeline
    sandbox: true
    concurrent: false
    properties:
        - github:
            url: 'https://github.com/SAP/SapMachine'
        - build-discarder:
            num-to-keep: 20
            artifact-num-to-keep: 1
    parameters:
        - string:
            name: SAPMACHINE_GIT_REPOSITORY
            default: 'https://github.com/SAP/SapMachine.git'
            description: 'The Git repository to use.'
        - string:
            name: GIT_REF
            default: '{branch_name}'
            description: 'The Git tag, branch or commit to build.'
        - string:
            name: SAPMACHINE_VERSION
            default: ''
            description: 'Either a SapMachine Release Tag or a JDK Major version. If empty, GIT_REF is used.'
        - string:
            name: JDK_BUILD
            default: ''
            description: 'Sets the version build number explicitly.'
        - string:
            name: SAPMACHINE_ARCHIVE_NAME_PREFIX
            default: 'sapmachine{major}-{platform}'
            description: 'The prefix of the bundle archive.'
        - string:
            name: DEVKIT
            default: '{devkit_default|}'
            description: 'Devkit, could be either a path that locally exists or the GAV coordinates to a tar.gz archive to be downloaded and extracted.'
        - string:
            name: EXTRA_CONFIGURE_OPTIONS
            default: '{extra_configure_options|}'
            description: 'Extra configure options passed directly to configure script.'
        - string:
            name: hotspot_test_groups
            default: ':tier1'
            description: 'Select the test group for jtreg hotspot tests. Empty means disabled.'
        - string:
            name: jdk_test_groups
            default: ':tier1'
            description: 'Select the test group for jtreg jdk tests. Empty means disabled.'
        - string:
            name: langtools_test_groups
            default: '"jdk tools lib"'
            description: 'Select the test group for jtreg langtools tests. Empty means disabled.'
        - bool:
            name: RUN_TESTS
            default: true
            description: 'Enable/disable jtreg runs.'
        - bool:
            name: BUILD_INSTALLER_PACKAGES
            default: true
            description: 'Build platform installer packages, e.g. Windows MSI, Debian packages.'
        - bool:
            name: CREATE_GENSRC_BUNDLE
            default: true
            description: 'Create a bundle with generated source files (gensrc), to be used in e.g. IDE setups.'
        - bool:
            name: UPLOAD_ARTIFACTORY
            default: true
            description: 'Upload build results to artifactory which will trigger testing.'
        - bool:
            name: ARCHIVE_WORKSPACE
            default: false
            description: 'Archive workspace for inspection after build.'
    dsl: *build_dsl

- job-template:
    name: build-{major}-{build_type_release}-{platform}
    defaults: 'build_defaults'
    description: 'Release build for SapMachine {major} on {platform}.'
    project-type: pipeline
    sandbox: true
    concurrent: false
    properties:
        - github:
            url: 'https://github.com/SAP/SapMachine'
        - build-discarder:
            num-to-keep: 20
            artifact-num-to-keep: 1
    parameters:
        - string:
            name: SAPMACHINE_GIT_REPOSITORY
            default: 'https://github.com/SAP/SapMachine.git'
            description: 'The Git repository to use.'
        - string:
            name: GIT_REF
            default: '{branch_name}'
            description: 'The Git tag, branch or commit to build.'
        - string:
            name: SAPMACHINE_VERSION
            default: ''
            description: 'Either a SapMachine Release Tag or a JDK Major version. If empty, GIT_REF is used.'
        - string:
            name: JDK_BUILD
            default: ''
            description: 'Sets the version build number explicitly.'
        - string:
            name: SAPMACHINE_ARCHIVE_NAME_PREFIX
            default: 'sapmachine{major}-{platform}'
            description: 'The prefix of the bundle archive.'
        - string:
            name: DEVKIT
            default: '{devkit_default|}'
            description: 'Devkit, could be either a path that locally exists or the GAV coordinates to a tar.gz archive to be downloaded and extracted.'
        - string:
            name: EXTRA_CONFIGURE_OPTIONS
            default: '{extra_configure_options|}'
            description: 'Extra configure options passed directly to configure script.'
        - string:
            name: hotspot_test_groups
            default: ':tier1'
            description: 'Select the test group for jtreg hotspot tests. Empty means disabled.'
        - string:
            name: jdk_test_groups
            default: ':tier1'
            description: 'Select the test group for jtreg jdk tests. Empty means disabled.'
        - string:
            name: langtools_test_groups
            default: '"jdk tools lib"'
            description: 'Select the test group for jtreg langtools tests. Empty means disabled.'
        - bool:
            name: RUN_TESTS
            default: false
            description: 'Enable/disable jtreg runs.'
        - bool:
            name: BUILD_INSTALLER_PACKAGES
            default: true
            description: 'Build platform installer packages, e.g. Windows MSI, Debian packages.'
        - bool:
            name: PUBLISH
            default: false
            description: 'When set to true, the resulting bundles will be published to GitHub.'
        - bool:
            name: CREATE_GENSRC_BUNDLE
            default: true
            description: 'Create a bundle with generated source files (gensrc), to be used in e.g. IDE setups.'
        - bool:
            name: ARCHIVE_WORKSPACE
            default: false
            description: 'Archive workspace for inspection after build.'
    dsl: *build_dsl

- job-template:
    name: build-service-snapshot-{major}
    defaults: 'service_defaults'
    description: 'Start snapshot build for SapMachine {major} on all platorms.'
    project-type: pipeline
    sandbox: true
    concurrent: true
    properties:
        - build-discarder:
            num-to-keep: 10
    parameters:
        - string:
            name: SAPMACHINE_GIT_REPOSITORY
            default: 'https://github.com/SAP/SapMachine.git'
            description: 'The Git repository to use.'
        - string:
            name: GIT_REF
            default: '{branch_name}'
            description: 'The Git tag, branch or commit to build.'
        - string:
            name: SAPMACHINE_VERSION
            default: ''
            description: 'Either a SapMachine Release Tag or a JDK Major version. If empty, GIT_REF is used.'
        - string:
            name: JDK_BUILD
            default: ''
            description: 'Sets the version build number explicitly.'
        - bool:
            name: BUILD_LINUX_AARCH64
            default: true
        - bool:
            name: BUILD_LINUX_ALPINE_X86_64
            default: '{build_alpine}'
        - bool:
            name: BUILD_LINUX_PPC64LE
            default: true
        - bool:
            name: BUILD_LINUX_X86_64
            default: true
        - bool:
            name: BUILD_MACOS_ARM_64
            default: true
        - bool:
            name: BUILD_MACOS_X86_64
            default: true
        - bool:
            name: BUILD_WINDOWS_X86_64
            default: true
        - string:
            name: EXTRA_CONFIGURE_OPTIONS
            default: '{extra_configure_options|}'
            description: 'Extra configure options passed directly to configure script.'
        - string:
            name: hotspot_test_groups
            default: ':tier1'
            description: 'Select the test group for jtreg hotspot tests. Empty means disabled.'
        - string:
            name: jdk_test_groups
            default: ':tier1'
            description: 'Select the test group for jtreg jdk tests. Empty means disabled.'
        - string:
            name: langtools_test_groups
            default: '"jdk tools lib"'
            description: 'Select the test group for jtreg langtools tests. Empty means disabled.'
        - bool:
            name: RUN_TESTS
            default: true
            description: 'Enable/disable jtreg runs.'
        - bool:
            name: BUILD_INSTALLER_PACKAGES
            default: true
            description: 'Build platform installer packages, e.g. Windows MSI, Debian packages.'
    dsl: |
        pipeline {{
            agent {{
                label 'build_service'
            }}
            stages {{
                stage("Trigger Builds") {{
                    steps {{
                        script {{
                            def platforms = [
                                "linux_aarch64": params.BUILD_LINUX_AARCH64,
                                "linux_alpine_x86_64": params.BUILD_LINUX_ALPINE_X86_64,
                                "linux_ppc64le": params.BUILD_LINUX_PPC64LE,
                                "linux_x86_64": params.BUILD_LINUX_X86_64,
                                "macos_aarch64": params.BUILD_MACOS_ARM_64,
                                "macos_x86_64": params.BUILD_MACOS_X86_64,
                                "windows_x86_64": params.BUILD_WINDOWS_X86_64
                            ]

                            for (p in platforms) {{
                                if (p.value) {{
                                    build job: 'build-{major}-snapshot-' + p.key,
                                        propagate: false,
                                        wait: false,
                                        parameters: [
                                            string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                            string(name: 'GIT_REF', value: params.GIT_REF),
                                            string(name: 'SAPMACHINE_VERSION', value: params.SAPMACHINE_VERSION),
                                            string(name: 'JDK_BUILD', value: params.JDK_BUILD),
                                            string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                            string(name: 'hotspot_test_groups', value: params.hotspot_test_groups),
                                            string(name: 'jdk_test_groups', value: params.jdk_test_groups),
                                            string(name: 'langtools_test_groups', value: params.langtools_test_groups),
                                            [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                            [$class: 'BooleanParameterValue', name: 'BUILD_INSTALLER_PACKAGES', value: params.BUILD_INSTALLER_PACKAGES]
                                        ]
                                }} else {{
                                    println "Skipping build for " + p.key + " (build=" + p.value + ")."
                                }}
                            }}
                        }}
                    }}
                }}
            }}
        }}

- job-template:
    name: build-service-release-{major}
    defaults: 'service_defaults'
    description: 'Start release build for SapMachine {major} on all platorms.'
    project-type: pipeline
    sandbox: true
    concurrent: true
    properties:
        - build-discarder:
            num-to-keep: 10
    parameters:
        - string:
            name: SAPMACHINE_GIT_REPOSITORY
            default: 'https://github.com/SAP/SapMachine.git'
            description: 'The Git repository to use.'
        - string:
            name: GIT_REF
            default: '{branch_name}'
            description: 'The Git tag, branch or commit to build.'
        - string:
            name: SAPMACHINE_VERSION
            default: ''
            description: 'Either a SapMachine Release Tag or a JDK Major version. If empty, GIT_REF is used.'
        - string:
            name: JDK_BUILD
            default: ''
            description: 'Sets the version build number explicitly.'
        - bool:
            name: BUILD_LINUX_AARCH64
            default: true
        - bool:
            name: BUILD_LINUX_ALPINE_X86_64
            default: '{build_alpine}'
        - bool:
            name: BUILD_LINUX_PPC64LE
            default: true
        - bool:
            name: BUILD_LINUX_X86_64
            default: true
        - bool:
            name: BUILD_MACOS_ARM_64
            default: true
        - bool:
            name: BUILD_MACOS_X86_64
            default: true
        - bool:
            name: BUILD_WINDOWS_X86_64
            default: true
        - string:
            name: EXTRA_CONFIGURE_OPTIONS
            default: '{extra_configure_options|}'
            description: 'Extra configure options passed directly to configure script.'
        - string:
            name: hotspot_test_groups
            default: ':tier1'
            description: 'Select the test group for jtreg hotspot tests. Empty means disabled.'
        - string:
            name: jdk_test_groups
            default: ':tier1'
            description: 'Select the test group for jtreg jdk tests. Empty means disabled.'
        - string:
            name: langtools_test_groups
            default: '"jdk tools lib"'
            description: 'Select the test group for jtreg langtools tests. Empty means disabled.'
        - bool:
            name: RUN_TESTS
            default: false
            description: 'Enable/disable jtreg runs.'
        - bool:
            name: BUILD_INSTALLER_PACKAGES
            default: true
            description: 'Build platform installer packages, e.g. Windows MSI, Debian packages.'
        - bool:
            name: PUBLISH
            default: false
            description: 'When set to true, the resulting bundles will be published to GitHub.'
    dsl: |
        pipeline {{
            agent {{
                label 'build_service'
            }}
            stages {{
                stage("Trigger Builds") {{
                    steps {{
                        script {{
                            def platforms = [
                                "linux_aarch64": params.BUILD_LINUX_AARCH64,
                                "linux_alpine_x86_64": params.BUILD_LINUX_ALPINE_X86_64,
                                "linux_ppc64le": params.BUILD_LINUX_PPC64LE,
                                "linux_x86_64": params.BUILD_LINUX_X86_64,
                                "macos_aarch64": params.BUILD_MACOS_ARM_64,
                                "macos_x86_64": params.BUILD_MACOS_X86_64,
                                "windows_x86_64": params.BUILD_WINDOWS_X86_64
                            ]

                            for (p in platforms) {{
                                if (p.value) {{
                                    build job: 'build-{major}-release-' + p.key,
                                        propagate: false,
                                        wait: false,
                                        parameters: [
                                            string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                            string(name: 'GIT_REF', value: params.GIT_REF),
                                            string(name: 'SAPMACHINE_VERSION', value: params.SAPMACHINE_VERSION),
                                            string(name: 'JDK_BUILD', value: params.JDK_BUILD),
                                            string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                            string(name: 'hotspot_test_groups', value: params.hotspot_test_groups),
                                            string(name: 'jdk_test_groups', value: params.jdk_test_groups),
                                            string(name: 'langtools_test_groups', value: params.langtools_test_groups),
                                            [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                            [$class: 'BooleanParameterValue', name: 'BUILD_INSTALLER_PACKAGES', value: params.BUILD_INSTALLER_PACKAGES],
                                            [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH]
                                        ]
                                }} else {{
                                    println "Skipping build for " + p.key + " (build=" + p.value + ")."
                                }}
                            }}
                        }}
                    }}
                }}
            }}
        }}
